(
define (domain client-server)
(:requirements :strips :typing :adl)
(:types server location request database service)

(:predicates   
   (server-active ?s - server)
   (database-active ?d - database)
   (databaseA ?d - database)
   (databaseB ?d - database)
   (cheaper ?l1 ?l2 - location)
   (server-at ?s - server ?l - location)
   (recently-added ?s -server)
   (location1 ?l - location)
   (location2 ?l - location)
   (high-fidelity)
)

(:functions 
   		(server-count)
        (response-time)
        (weight_rt)
        (content-quality)
        (weight_cq)
        (server-cost)
        (weight_cost)
        (service-disruption)
        (weight_sd)
        (time)
        (databaseA-threads)
        (databaseB-threads)
        (max-database-threads)
)


(:durative-action add-server-from-l1
    :parameters (?s - server ?l - location)
    :duration (= ?duration 600)
    :condition (and (at start (> (response-time) 100))
                    (at start (not (server-active ?s)))
                    (at start (location1 ?l))
                    (at start (server-at ?s ?l))
                    (over all (not (server-active ?s)))
                    (over all (server-at ?s ?l))
                    (over all (location1 ?l))
		    )
    :effect (and (at end (server-active ?s))
                 (at end (recently-added ?s))
                 (at end (increase (server-count) 1))
                 (at end (decrease (response-time) 5))
                 (at end (increase (server-cost) 15))
                 (at end (increase (service-disruption) 5))
                 (at end (increase (time) 600))
            )
)

(:durative-action add-server-from-l2
    :parameters (?s - server ?l - location)
    :duration (= ?duration 600)
    :condition (and (at start (> (response-time) 100))
                    (at start (not (server-active ?s)))
                    (at start (location2 ?l))
                    (at start (server-at ?s ?l))
                    (over all (not (server-active ?s)))
                    (over all (server-at ?s ?l))
                    (over all (location2 ?l))
		    )
    :effect (and (at end (server-active ?s))
                 (at end (recently-added ?s))
                 (at end (increase (server-count) 1))
                 (at end (decrease (response-time) 5))
                 (at end (increase (server-cost) 20))
                 (at end (increase (service-disruption) 5))
                 (at end (increase (time) 600))
            )
)

;(:durative-action add-server
;    :parameters (?s - server)
;    :duration (= ?duration 600)
;    :condition (and (at start (> (response-time) 100))
;                    (at start (not (server-active ?s)))
;                    (over all (not (server-active ?s)))
;		    )
;    :effect (and (at end (server-active ?s))
;                 (at end (increase (server-count) 1))
;                 (at end (decrease (response-time) 5))
;                 (at end (increase (server-cost) 20))
;                 (at end (increase (service-disruption) 5))
;                 (at end (increase (time) 600))
;            )
;)

(:durative-action delete-server-from-l1
    :parameters (?s - server ?l - location)
    :duration (= ?duration 120)
    :condition (and (at start (<= (response-time) 100))
                    (at start (server-active ?s))
                    (at start (location1 ?l))
                    (at start (server-at ?s ?l))
                    (over all (server-active ?s))
                    (over all (<= (response-time) 100))
                    (over all (not (recently-added ?s)))
                    (over all (server-at ?s ?l))
                    (over all (location1 ?l))
		    )
    :effect (and (at end (not (server-active ?s)))
                 (at end (decrease (server-count) 1))
                 (at end (increase (response-time) 5))
                 (at end (decrease (server-cost) 15))
                 (at end (increase (service-disruption) 5))
                 (at end (increase (time) 120))
            )
)

(:durative-action delete-server-from-l2
    :parameters (?s - server ?l - location)
    :duration (= ?duration 120)
    :condition (and (at start (<= (response-time) 100))
                    (at start (server-active ?s))
                    (at start (location2 ?l))
                    (at start (server-at ?s ?l))
                    (over all (server-active ?s))
                    (over all (<= (response-time) 100))
                    (over all (not (recently-added ?s)))
                    (over all (server-at ?s ?l))
                    (over all (location2 ?l))
		    )
    :effect (and (at end (not (server-active ?s)))
                 (at end (decrease (server-count) 1))
                 (at end (increase (response-time) 5))
                 (at end (decrease (server-cost) 15))
                 (at end (increase (service-disruption) 5))
                 (at end (increase (time) 120))
            )
)

(:durative-action reduce-text-resolution
    :duration (= ?duration 60)
    :condition (and (at start (> (response-time) 100))
                    (at start (high-fidelity))
                    (over all (high-fidelity))
                    (over all (> (response-time) 100))
		    )
    :effect (and (at end (not (high-fidelity)))
                 (at end (decrease (response-time) (* (server-count) 2)))
                 (at end (decrease (server-cost) 0))
                 (at end (decrease (content-quality) 50))
                 (at end (increase (service-disruption) 10))
                 (at end (increase (time) 60))
            )
)

(:durative-action increase-text-resolution
    :duration (= ?duration 90)
    :condition (and (at start (<= (response-time) 100))
                    (at start (not (high-fidelity)))
                    (over all (not (high-fidelity)))
                    (over all (> (response-time) 100))
		       )
    :effect (and (at end (high-fidelity))
                 (at end (decrease (response-time) (* (server-count) 2)))
                 (at end (increase (content-quality) 50))
                 (at end (increase (service-disruption) 10))
                 (at end (increase (time) 1))
            )
)

(:durative-action increase-database-A-threads
    :parameters (?d - database)
    :duration (= ?duration 180)
    :condition (and (at start (> (response-time) 100))
                    (at start (databaseA ?d))
                    (at start (database-active ?d))
                    (at start (< (databaseA-threads) max-database-threads))
                    (over all (> (response-time) 100))
                    (over all (databaseA ?d))
                    (over all (database-active ?d))
                    (over all (< (databaseA-threads) max-database-threads))
		       )
    :effect (and (at end (increase (databaseA-threads) 1))
                 (at end (decrease (response-time) 2))
                 (at end (increase (time) 180))
            )
)

(:durative-action increase-database-B-threads
    :parameters (?d - database)
    :duration (= ?duration 180)
    :condition (and (at start (> (response-time) 100))
                    (at start (databaseB ?d))
                    (at start (database-active ?d))
                    (at start (< (databaseB-threads) max-database-threads))
                    (over all (> (response-time) 100))
                    (over all (databaseB ?d))
                    (over all (database-active ?d))
                    (over all (< (databaseB-threads) max-database-threads))
		       )
    :effect (and (at end (increase (databaseB-threads) 2))
                 (at end (decrease (response-time) 1))
                 (at end (increase (time) 180))
            )
)

(:durative-action move-to-cheaper-location
    :parameters (?s1 ?s2 - server ?l1 ?l2 - location)
    :duration (= ?duration 600)
    :condition (and (at start (< (response-time) 100))
                    (at start (server-active ?s2))
                    (at start (not (server-active ?s1)))
                    (at start (cheaper ?l1 ?l2))
                    (at start (server-at ?s2 ?l2))
                    (at start (server-at ?s1 ?l1))
                    (over all (< (response-time) 100))
                    (over all (server-active ?s2))
                    (over all (not (server-active ?s1)))
                    (over all (cheaper ?l1 ?l2))
                    (over all (server-at ?s2 ?l2))
                    (over all (server-at ?s1 ?l1))
		    )
    :effect (and (at end (server-active ?s1))
                 (at end (recently-added ?s1))
                 (at end (not (server-active ?s2)))
                 (at end (decrease (server-cost) 5))
                 (at end (increase (service-disruption) 5))
                 (at end (increase (time) 600))
            )
)
)

